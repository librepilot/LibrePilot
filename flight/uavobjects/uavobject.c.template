/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup $(NAME) $(NAME)
 * @brief $(DESCRIPTION)
 *
 * Autogenerated files and functions for $(NAME) Object
 * @{ 
 *
 * @file       $(NAMELC).c
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the $(NAME) object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: $(XMLFILE). 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#include <openpilot.h>
#include "$(NAMELC).h"

// Private variables
#if (defined(__MACH__) && defined(__APPLE__))
static UAVObjHandle handle __attribute__((section("__DATA,_uavo_handles")));
#else
static UAVObjHandle handle __attribute__((section("_uavo_handles")));
#endif

#if $(NAMEUC)_ISSETTINGS
SETTINGS_INITCALL($(NAME)Initialize);
#endif

/**
 * Initialize object.
 * \return 0 Success
 * \return -1 Failure to initialize or -2 for already initialized
 */
int32_t $(NAME)Initialize(void)
{
    // Compile time assertion that the $(NAME)DataPacked and $(NAME)Data structs
    // have the same size (though instances of $(NAME)Data
    // should be placed in memory by the linker/compiler on a 4 byte alignment).
    PIOS_STATIC_ASSERT(sizeof($(NAME)DataPacked) == sizeof($(NAME)Data));
    
    // Don't set the handle to null if already registered
    if (UAVObjGetByID($(NAMEUC)_OBJID)) {
        return -2;
    }

    static const UAVObjType objType = {
       .id = $(NAMEUC)_OBJID,
       .instance_size = $(NAMEUC)_NUMBYTES,
       .init_callback = &$(NAME)SetDefaults,
    };

    // Register object with the object manager
    handle = UAVObjRegister(&objType,
        $(NAMEUC)_ISSINGLEINST, $(NAMEUC)_ISSETTINGS, $(NAMEUC)_ISPRIORITY);

    // Done
    return handle ? 0 : -1;
}

static inline void DataOverrideDefaults(__attribute__((unused)) $(NAME)Data * data) {}

void $(NAME)DataOverrideDefaults($(NAME)Data * data) __attribute__((weak, alias("DataOverrideDefaults")));

/**
 * Initialize object fields and metadata with the default values.
 * If a default value is not specified the object fields
 * will be initialized to zero.
 */
void $(NAME)SetDefaults(UAVObjHandle obj, uint16_t instId)
{
    $(NAME)Data data;

    // Initialize object fields to their default values
    UAVObjGetInstanceData(obj, instId, &data);
    memset(&data, 0, sizeof($(NAME)Data));
$(INITFIELDS)
    $(NAME)DataOverrideDefaults(&data);
    UAVObjSetInstanceData(obj, instId, &data);

    // Initialize object metadata to their default values
    if ( instId == 0 ) {
        UAVObjMetadata metadata;
        metadata.flags =
            $(FLIGHTACCESS) << UAVOBJ_ACCESS_SHIFT |
            $(GCSACCESS) << UAVOBJ_GCS_ACCESS_SHIFT |
            $(FLIGHTTELEM_ACKED) << UAVOBJ_TELEMETRY_ACKED_SHIFT |
            $(GCSTELEM_ACKED) << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
            $(FLIGHTTELEM_UPDATEMODE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
            $(GCSTELEM_UPDATEMODE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
            $(LOGGING_UPDATEMODE) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
        metadata.telemetryUpdatePeriod = $(FLIGHTTELEM_UPDATEPERIOD);
        metadata.gcsTelemetryUpdatePeriod = $(GCSTELEM_UPDATEPERIOD);
        metadata.loggingUpdatePeriod = $(LOGGING_UPDATEPERIOD);
        UAVObjSetMetadata(obj, &metadata);
    }
}

/**
 * Get object handle
 */
UAVObjHandle $(NAME)Handle()
{
    return handle;
}

/**
 * Get/Set object Functions
 */
$(SETGETFIELDS)

/**
 * @}
 */
